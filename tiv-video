#!/usr/bin/env python
import sys
import cv2
import argparse
import os
from subprocess import Popen, PIPE
from threading import Thread
import tty
import termios

import paste

CTRL_MODE_DEFAULT = True
SPEED_DEFAULT = 3
TIV_DEFAULT = "/usr/local/bin/tiv"
TMP_FILE = "/tmp/__tivid__.jpg"


def parse_args():
    """Parse input arguments."""
    parser = argparse.ArgumentParser(
        description='Read and show a video in a terminal')

    parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')

    required.add_argument('-v', '--vid', dest='vid', help='video file',
                          required=True)

    optional.add_argument('-t', '--tiv', dest='tiv',
                          help='tiv programm, default: '+TIV_DEFAULT,
                          default=TIV_DEFAULT)
    optional.add_argument('-s', '--speed', dest='speed', type=int,
                          help='remove frames to speed up, default: ' +
                          str(SPEED_DEFAULT),
                          default=SPEED_DEFAULT)
    optional.add_argument('--tmp', dest='tmp',
                          help='tmp file, default: '+TMP_FILE,
                          default=TMP_FILE)
    optional.add_argument('--ctrl', dest='ctrl', action='store_true',
                          help='add this argument to enable keyboard control (default)')
    optional.add_argument('--no-ctrl', dest='ctrl', action='store_false',
                          help='add this argument to disable keyboard control')
    optional.set_defaults(ctrl=CTRL_MODE_DEFAULT)

    optional.add_argument('--sys-mode', dest='sysmode', action='store_true',
                          help='if it is not working try with this mode')
    optional.set_defaults(sysmode=False)

    args = parser.parse_args()
    return args


class Menu():
    """Menu controller, this is used by the 2 threads"""

    def __init__(self):
        self.__stop = False
        self.__pause = False

    def stop(self):
        self.__stop = True

    def pause(self):
        self.__pause = True

    def resume(self):
        self.__pause = False

    def toggle(self):
        self.__pause = not self.__pause

    def needToStop(self):
        return self.__stop

    def isPlaying(self):
        return not self.__pause  # and not self.__stop

    def isPausing(self):
        return self.__pause


class Video(Thread):
    """Thread to play the video."""

    def __init__(self, vidname, tiv, speed, tmp, menu):
        Thread.__init__(self)
        self.vidname = vidname
        self.tiv = tiv
        self.speed = speed
        self.tmp = tmp
        self.menu = menu
        self.icons = []

    @staticmethod
    def pint(s):
        sys.stdout.write(s)
        sys.stdout.flush()

    @staticmethod
    def clear():
        # Video.pint("\033[H\033[J")
        os.system("clear")

    @staticmethod
    def gotoxy(x, y):
        s = "\033[%d;%dH" % (x, y)
        Video.pint(s)

    @staticmethod
    def print_im(im):
        Video.gotoxy(0, 0)
        Video.pint(im)

    @staticmethod
    def cmd_and_print(t, i):
        if args.sysmode:
            Video.gotoxy(0, 0)
            os.system(t + " " + i)
        else:
            proc = Popen([t, i], stdout=PIPE)
            im = proc.stdout.read()
            Video.print_im(im)

    def set_icon(self, icon, num=5):
        self.icons = []
        for _ in range(num):
            self.icons.append(icon)

    def get_icon(self):
        if len(self.icons) == 0:
            return -1
        else:
            return self.icons.pop(0)

    def run(self):
        cap = cv2.VideoCapture(self.vidname)
        self.clear()
        i = 0
        ret, frame = cap.read()
        while(not menu.needToStop() and cap.isOpened()):
            if menu.isPlaying():
                if not ret:
                    menu.stop()
                    break
                i += 1
                if i % self.speed == 0:
                    cv2.imwrite(self.tmp, frame)
                    paste.paste_icon(self.tmp, self.get_icon(), self.tmp)
                    Video.cmd_and_print(self.tiv, self.tmp)
                ret, frame = cap.read()
            elif menu.isPausing():
                cv2.imwrite(self.tmp, frame)
                paste.paste_icon(self.tmp, self.get_icon(), self.tmp)
                Video.cmd_and_print(self.tiv, self.tmp)


def readchar():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setcbreak(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch


class Controller():
    """Control the video."""

    def __init__(self, menu, vid):
        self.menu = menu
        self.kill = False
        self.vid = vid

    def process_char(self, key):
        if key in ['\x1b', 'q']:
            self.menu.stop()
            self.kill = True

        elif key in [' ']:
            self.menu.toggle()
            if menu.isPausing():
                self.vid.set_icon("pause")
            else:
                self.vid.set_icon("play")

    def run(self):
        while not self.kill and not self.menu.needToStop():
            char = readchar()
            self.process_char(char)


if __name__ == '__main__':
    args = parse_args()

    if not args.vid:
        raise IOError('Please put a video file')

    menu = Menu()
    vid = Video(args.vid, args.tiv, args.speed, args.tmp, menu)
    vid.start()

    if args.ctrl:
        ctrl = Controller(menu, vid)
        ctrl.run()

    vid.join()
