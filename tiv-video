#!/usr/bin/env python
import sys
import cv2
import argparse
import os
from subprocess import Popen, PIPE
from threading import Thread
import tty
import termios
import time
from paste import paste_icon
from math import ceil
import config


def parse_args():
    """Parse input arguments."""
    parser = argparse.ArgumentParser(
        description='Read and show a video in a terminal,\
        default args in config.py')

    parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')

    required.add_argument('vid', help='video file')

    optional.add_argument('--tiv', dest='tiv',
                          help='tiv programm, default: '+config.TIV_DEFAULT,
                          default=config.TIV_DEFAULT)
    optional.add_argument('--tmp', dest='tmp',
                          help='tmp file, default: '+config.TMP_FILE,
                          default=config.TMP_FILE)

    optional.add_argument('--sys-mode', dest='sysmode', action='store_true',
                          help='if it is not working try with this mode')
    optional.set_defaults(sysmode=False)

    args = parser.parse_args()
    return args


class Menu():
    """Menu controller, this is used by the 2 threads"""

    def __init__(self):
        self.__stop = False
        self.__pause = False

    def stop(self):
        self.__stop = True

    def pause(self):
        self.__pause = True

    def resume(self):
        self.__pause = False

    def toggle(self):
        self.__pause = not self.__pause

    def needToStop(self):
        return self.__stop

    def isPlaying(self):
        return not self.__pause  # and not self.__stop

    def isPausing(self):
        return self.__pause


class Video(Thread):
    """Thread to play the video."""

    def __init__(self, vidname, tiv, tmp, menu):
        Thread.__init__(self)
        self.vidname = vidname
        self.tiv = tiv
        self.tmp = tmp
        self.menu = menu
        self.icons = []
        self.ix = 0
        self.iy = 0
        self.fast = 1
        self.wait = 0

    @staticmethod
    def pint(s):
        sys.stdout.write(s)
        sys.stdout.flush()

    @staticmethod
    def clear():
        # Video.pint("\033[H\033[J")
        os.system("clear")

    @staticmethod
    def gotoxy(x, y):
        s = "\033[%d;%dH" % (x, y)
        Video.pint(s)

    @staticmethod
    def print_im(im):
        Video.gotoxy(0, 0)
        Video.pint(im)

    @staticmethod
    def cmd_and_print(t, i):
        if args.sysmode:
            Video.gotoxy(0, 0)
            os.system(t + " " + i)
        else:
            proc = Popen([t, i], stdout=PIPE)
            im = proc.stdout.read()
            Video.print_im(im)

    @staticmethod
    def show_frame(tmp, frame, icon, tiv, x, y):
        cv2.imwrite(tmp, frame)
        paste_icon(tmp, icon, tmp, x, y)
        Video.cmd_and_print(tiv, tmp)

    def set_icon(self, icon, num=5):
        self.icons = []
        for _ in range(num):
            self.icons.append(icon)

    def reset_icon(self):
        self.icons = []

    def get_icon(self):
        if len(self.icons) == 0:
            return -1
        else:
            return self.icons.pop(0)

    @staticmethod
    def get_fps(cap):
        (major_ver, minor_ver, subminor_ver) = (cv2.__version__).split('.')
        if int(major_ver) < 3:
            fps = cap.get(cv2.cv.CV_CAP_PROP_FPS)
        else:
            fps = cap.get(cv2.CAP_PROP_FPS)
        return fps

    def show_frame_speed_wait(self, frame, fps):
        time.sleep(self.wait)
        start = time.time()
        Video.show_frame(self.tmp, frame, self.get_icon(),
                         self.tiv, self.ix, self.iy)
        end = time.time()
        elapse = end - start

        self.speed = ceil(fps * elapse)
        # 0.8 is experimental but it works well
        self.wait = (self.speed/fps - elapse)*0.8

    def run(self):
        cap = cv2.VideoCapture(self.vidname)
        self.clear()
        ret, frame = cap.read()
        height, weight, _ = frame.shape
        self.ix = weight/2 - config.LOGO_WIDTH/2
        self.iy = height/2 - config.LOGO_HEIGHT/2
        fps = Video.get_fps(cap)

        self.show_frame_speed_wait(frame, fps)

        i = 0
        while(not menu.needToStop() and cap.isOpened()):
            if menu.isPlaying():
                if not ret:
                    menu.stop()
                    break
                i += 1
                if i % (self.speed*self.fast) == 0:
                    self.show_frame_speed_wait(frame, fps)
                ret, frame = cap.read()
            elif menu.isPausing():
                self.set_icon("pause", num=1)
                self.show_frame_speed_wait(frame, fps)


def readchar():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setcbreak(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch


class Controller():
    """Control the video."""

    def __init__(self, menu, vid):
        self.menu = menu
        self.kill = False
        self.vid = vid

    def process_char(self, key):
        if key in ['q']:
            self.menu.stop()
            self.kill = True

        elif key in [' ']:
            self.menu.toggle()
            if menu.isPausing():
                self.vid.set_icon("pause", num=1)
            else:
                self.vid.set_icon("play")

        elif key == '\x1b':
            first = readchar()
            if first != '[':
                return self.process_char(first)

            letter = readchar()
            if letter == 'C':
                self.vid.set_icon("fast", num=2)
                self.vid.fast *= 2
            elif letter == 'D':
                self.vid.set_icon("rewind", num=2)
                self.vid.fast = 1
            else:
                return True

        else:
            self.vid.reset_icon()
            self.vid.fast = 1
        return True

    def run(self):
        while not self.kill and not self.menu.needToStop():
            char = readchar()
            self.process_char(char)


if __name__ == '__main__':
    args = parse_args()

    if not args.vid:
        raise IOError('Please put a video file')

    menu = Menu()
    vid = Video(args.vid, args.tiv, args.tmp, menu)
    vid.start()

    ctrl = Controller(menu, vid)
    ctrl.run()

    vid.join()
