#!/usr/bin/env python
import sys
import cv2
import argparse
import os
#from threading import Thread
import multiprocessing
from subprocess import Popen, PIPE

try:
    import getch
    CTRL_MODE_DEFAULT = True
except ImportError:
    CTRL_MODE_DEFAULT = False


SPEED_DEFAULT = 3
TIV_DEFAULT = "/usr/local/bin/tiv"
TMP_FILE = "/tmp/__tivid__.jpg"


def parse_args():
    """Parse input arguments."""
    parser = argparse.ArgumentParser(
        description='Read and show a video in a terminal')

    parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')

    required.add_argument('-v', '--vid', dest='vid', help='video file',
                          required=True)

    optional.add_argument('-t', '--tiv', dest='tiv',
                          help='tiv programm, default: '+TIV_DEFAULT,
                          default=TIV_DEFAULT)
    optional.add_argument('-s', '--speed', dest='speed', type=int,
                          help='remove frames to speed up, default: ' +
                          str(SPEED_DEFAULT),
                          default=SPEED_DEFAULT)
    optional.add_argument('--tmp', dest='tmp',
                          help='tmp file, default: '+TMP_FILE,
                          default=TMP_FILE)
    optional.add_argument('--ctrl', dest='ctrl', action='store_true',
                          help='add this argument to enable keyboard control (default)')
    optional.add_argument('--no-ctrl', dest='ctrl', action='store_false',
                          help='add this argument to disable keyboard control')
    optional.set_defaults(ctrl=CTRL_MODE_DEFAULT)

    optional.add_argument('--sys-mode', dest='sysmode', action='store_true',
                          help='if it is not working try with this mode')
    optional.set_defaults(sysmode=False)

    args = parser.parse_args()
    return args


class Menu():
    """Menu controller, this is used by the 2 threads"""

    def __init__(self):
        self.__stop = False
        self.__pause = False

    def stop(self):
        self.__stop = True

    def pause(self):
        self.__pause = True

    def resume(self):
        self.__pause = False

    def toggle(self):
        self.__pause = not self.__pause

    def needToStop(self):
        return self.__stop

    def isPlaying(self):
        return not self.__pause  # and not self.__stop


class Video(multiprocessing.Process):
    """Thread to play the video."""

    def __init__(self, vidname, tiv, speed, tmp, menu):
        multiprocessing.Process.__init__(self)
        self.vidname = vidname
        self.tiv = tiv
        self.speed = speed
        self.tmp = tmp
        self.menu = menu

    @staticmethod
    def pint(s):
        sys.stdout.write(s)
        sys.stdout.flush()

    @staticmethod
    def clear():
        # Video.pint("\033[H\033[J")
        os.system("clear")

    @staticmethod
    def gotoxy(x, y):
        s = "\033[%d;%dH" % (x, y)
        Video.pint(s)

    @staticmethod
    def print_im(im):
        Video.gotoxy(0, 0)
        Video.pint(im)

    def run(self):
        cap = cv2.VideoCapture(self.vidname)
        self.clear()
        i = -1
        while(not menu.needToStop() and cap.isOpened()):
            if menu.isPlaying():
                ret, frame = cap.read()
                if not ret:
                    break
                i += 1
                if i % self.speed == 0:
                    cv2.imwrite(self.tmp, frame)
                    if args.sysmode:
                        Video.gotoxy(0, 0)
                        os.system(self.tiv + " " + self.tmp)
                    else:
                        proc = Popen([self.tiv, self.tmp], stdout=PIPE)
                        im = proc.stdout.read()
                        Video.print_im(im)

        self.clear()


class Controller(multiprocessing.Process):
    """Thread to control the video."""

    def __init__(self, menu):
        multiprocessing.Process.__init__(self)
        self.menu = menu
        self.canToggle = True
        self.kill = False
        self.menu.stop()

    def process_char(self, key):
        if key in ['\x1b', 'q']:
            self.menu.stop()
            self.kill = True

        elif key in [' ']:
            self.menu.toggle()
            self.canToggle = False

        else:
            self.canToggle = True

    def run(self):
        self.menu.stop()
        while not self.kill:
            char = getch.getch()
            self.process_char(char)


if __name__ == '__main__':
    args = parse_args()

    if not args.vid:
        raise IOError('Please put a video file')

    menu = Menu()
    vid = Video(args.vid, args.tiv, args.speed, args.tmp, menu)
    if args.ctrl:
        ctrl = Controller(menu)
        ctrl.start()

    vid.start()
    vid.join()

    if args.ctrl:
        ctrl.join()
