#!/usr/bin/env python
import sys
import cv2
import argparse
import os
from subprocess import Popen, PIPE
from threading import Thread
import tty
import termios
import time
from math import ceil

# Lines to add the folder of tiv-video executable to the path
PROGRAM_PATH = '/'.join(os.path.join(sys.argv[0].split('/')[:-1]))
sys.path.insert(0, PROGRAM_PATH)

# This enable to load theses libraries everywhere
import paste
import config


def parse_args():
    """Parse input arguments."""
    parser = argparse.ArgumentParser(
        description='Read and show a video in a terminal,\
        default args in config.py')

    parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')

    required.add_argument('vid', help='video file or directory')

    optional.add_argument('--tiv', dest='tiv',
                          help='tiv programm, default: '+config.TIV_DEFAULT,
                          default=config.TIV_DEFAULT)
    optional.add_argument('--tmp', dest='tmp',
                          help='tmp file, default: '+config.TMP_FILE,
                          default=config.TMP_FILE)
    optional.add_argument('--sys-mode', dest='sysmode', action='store_true',
                          help='if it is not working try with this mode')
    optional.set_defaults(sysmode=False)

    optional.add_argument('--fps', dest='fps',
                          help='FPS for folder with images, default: ' + str(config.FPS_IMAGES),
                          default=config.FPS_IMAGES)
    args = parser.parse_args()
    return args


class Menu():
    """Menu controller, this is used by the 2 threads"""

    def __init__(self):
        self.__stop = False
        self.__pause = False

    def stop(self):
        self.__stop = True

    def pause(self):
        self.__pause = True

    def resume(self):
        self.__pause = False

    def toggle(self):
        self.__pause = not self.__pause

    def needToStop(self):
        return self.__stop

    def isPlaying(self):
        return not self.__pause  # and not self.__stop

    def isPausing(self):
        return self.__pause


class Video():
    """ General class to load/back etc on a video"""
    def __init__(self, vidname):
        self.vidname = vidname

    def init_frame(self):
        pass

    def get_frame(self):
        pass

    def load_next_frame(self):
        pass

    def has_frame(self):
        pass

    def isImages(self):
        pass


class VideoMP4(Video):
    """Class to load/back a mp4 video"""
    def __init__(self, vidname):
        Video.__init__(self, vidname)
        self.cap = cv2.VideoCapture(self.vidname)
        self.ret = True

    def init_frame(self):
        self.ret, self.actualframe = self.cap.read()
        height, width, _ = self.actualframe.shape
        fps = VideoManager.get_fps(self.cap)
        return height, width, fps

    def get_frame(self):
        return self.actualframe

    def load_next_frame(self):
        if self.ret:
            self.ret, self.actualframe = self.cap.read()
        return self.ret

    def has_frame(self):
        return self.ret

    def isImages(self):
        return False


class VideoImages(Video):
    """Class to load/back a videos from images frame"""
    def __init__(self, vidname):
        Video.__init__(self, vidname)
        self.frames = os.listdir(self.vidname)
        self.frames.sort(key=lambda x: int(x.split('.')[0]))
        self.frames = [os.path.join(self.vidname, x) for x in self.frames]
        self.numframe = len(self.frames)
        self.ind = 0

    def init_frame(self):
        self.actualframe = cv2.imread(self.frames[self.ind])
        height, width, _ = self.actualframe.shape
        return height, width, args.fps

    def get_frame(self):
        return self.actualframe

    def load_next_frame(self):
        if self.ind < self.numframe - 1:
            self.ind += 1
            self.actualframe = cv2.imread(self.frames[self.ind])
            return True
        else:
            return False

    def load_previous_frame(self):
        if self.ind > 0:
            self.ind -= 1
            self.actualframe = cv2.imread(self.frames[self.ind])
            return True
        else:
            return False

    def has_frame(self):
        return self.ind < self.numframe

    def isImages(self):
        return True


class VideoManager(Thread):
    """Thread to play the video."""

    def __init__(self, vidname, tiv, tmp, menu):
        Thread.__init__(self)
        self.vidname = vidname
        self.tiv = tiv
        self.tmp = tmp
        self.menu = menu
        self.icons = []
        self.ix = 0
        self.iy = 0
        self.fast = 1
        self.wait = 0
        self.rewind = False

    @staticmethod
    def pint(s):
        sys.stdout.write(s)
        sys.stdout.flush()

    @staticmethod
    def clear():
        # VideoManager.pint("\033[H\033[J")
        os.system("clear")

    @staticmethod
    def gotoxy(x, y):
        s = "\033[%d;%dH" % (x, y)
        VideoManager.pint(s)

    @staticmethod
    def print_im(im):
        VideoManager.gotoxy(0, 0)
        VideoManager.pint(im)

    @staticmethod
    def cmd_and_print(t, i):
        if args.sysmode:
            VideoManager.gotoxy(0, 0)
            os.system(t + " " + i)
        else:
            proc = Popen([t, i], stdout=PIPE)
            im = proc.stdout.read()
            VideoManager.print_im(im)

    @staticmethod
    def show_frame(tmp, frame, icon, tiv, x, y):
        cv2.imwrite(tmp, frame)
        paste.paste_icon(tmp, icon, tmp, x, y, PROGRAM_PATH)
        VideoManager.cmd_and_print(tiv, tmp)

    def set_icon(self, icon, num=5):
        self.icons = []
        for _ in range(num):
            self.icons.append(icon)

    def reset_icon(self):
        self.icons = []

    def get_icon(self):
        if len(self.icons) == 0:
            return -1
        else:
            return self.icons.pop(0)

    def configlogo(self, height, width):
        self.ix = width/2 - config.LOGO_WIDTH/2
        self.iy = height/2 - config.LOGO_HEIGHT/2

    @staticmethod
    def get_fps(cap):
        (major_ver, minor_ver, subminor_ver) = (cv2.__version__).split('.')
        if int(major_ver) < 3:
            fps = cap.get(cv2.cv.CV_CAP_PROP_FPS)
        else:
            fps = cap.get(cv2.CAP_PROP_FPS)
        return fps

    def show_frame_speed_wait(self, frame, fps):
        time.sleep(self.wait)
        start = time.time()
        VideoManager.show_frame(self.tmp, frame, self.get_icon(),
                                self.tiv, self.ix, self.iy)
        end = time.time()
        elapse = end - start

        self.speed = ceil(fps * elapse)
        # 0.85 is experimental but it works well
        self.wait = (self.speed/fps - elapse)*0.85
        return True

    def run(self):
        self.clear()
        if os.path.isdir(self.vidname):
            vid = VideoImages(self.vidname)
        else:
            vid = VideoMP4(self.vidname)
        height, width, fps, = vid.init_frame()
        self.configlogo(height, width)
        self.show_frame_speed_wait(vid.get_frame(), fps)
        i = 0
        while(not menu.needToStop() and vid.has_frame()):
            if menu.isPlaying():
                if self.rewind and vid.isImages():
                    vid.load_previous_frame()
                else:
                    vid.load_next_frame()
                i += 1
                if i % (self.speed*self.fast) == 0:
                    if vid.has_frame():
                        self.show_frame_speed_wait(vid.get_frame(), fps)
                    else:
                        break
            elif menu.isPausing():
                self.set_icon("pause", num=1)
                self.show_frame_speed_wait(vid.get_frame(), fps)
        menu.stop()


def readchar():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setcbreak(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch


class KeyboardController():
    """Control the video."""

    def __init__(self, menu, vid):
        self.menu = menu
        self.kill = False
        self.vid = vid

    def process_char(self, key):
        if key in ['q']:
            self.menu.stop()
            self.kill = True

        elif key in [' ']:
            self.menu.toggle()
            if menu.isPausing():
                self.vid.set_icon("pause", num=1)
            else:
                self.vid.set_icon("play")

        elif key == '\x1b':
            first = readchar()
            if first != '[':
                return self.process_char(first)

            letter = readchar()
            # Right key
            if letter == 'C':
                if self.vid.rewind:
                    self.vid.rewind = False
                    self.vid.fast = 1
                else:
                    self.vid.fast *= 2
                self.vid.set_icon("fast", num=2)

            # Up key
            elif letter == 'A':
                self.vid.set_icon("play", num=2)
                self.vid.fast = 1
                self.vid.rewind = False
            # Left key
            elif letter == 'D':
                if self.vid.rewind:
                    self.vid.fast *= 2
                else:
                    self.vid.rewind = True
                    self.vid.fast = 1
                self.vid.set_icon("rewind", num=2)
            else:
                return True

        else:
            self.vid.reset_icon()
            self.vid.fast = 1
        return True

    def run(self):
        while not self.kill and not self.menu.needToStop():
            char = readchar()
            self.process_char(char)


if __name__ == '__main__':
    args = parse_args()
    print sys.argv[0]
    if not args.vid:
        raise IOError('Please put a video file')

    menu = Menu()
    vid = VideoManager(args.vid, args.tiv, args.tmp, menu)
    vid.start()

    ctrl = KeyboardController(menu, vid)
    ctrl.run()

    vid.join()
